generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  password      String
  role          Role         @default(STUDENT)
  profileImage  String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  attendances   Attendance[]
  courses       CourseUser[]
  lecturesTaken Lecture[]    @relation("LectureTakenBy")
  otpSessions   OtpSession[]
  requests      Request[]
}

model Course {
  id          String       @id @default(cuid())
  name        String
  code        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  users       CourseUser[]
  lectures    Lecture[]
  requests    Request[]
  OtpSession  OtpSession[]
}

model CourseUser {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Lecture {
  id          String       @id @default(cuid())
  title       String
  courseId    String
  takenById   String
  type        LectureType
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  verifyType  VerifyType   @default(MANUAL)
  otpCode     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attendances Attendance[]
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  takenBy     User         @relation("LectureTakenBy", fields: [takenById], references: [id])
  OtpSession  OtpSession[]
}

model Attendance {
  id        String   @id @default(cuid())
  userId    String
  lectureId String
  status    Status   @default(PRESENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lecture   Lecture  @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lectureId])
}

model Request {
  id          String        @id @default(cuid())
  userId      String
  type        RequestType
  description String
  status      RequestStatus @default(PENDING)
  lectureId   String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  courseId    String
  scheduleId  String?
  course      Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OtpSession {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  lectureId String
  otp       String
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lecture   Lecture  @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@unique([userId, lectureId])
}

enum Role {
  TEACHER
  STUDENT
}

enum LectureType {
  LECTURE
  PRACTICE
}

enum VerifyType {
  MANUAL
  OTP
}

enum Status {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum RequestType {
  ABSENCE
  LATE
  OTHER
  RE_REGISTRATION
  LEAVE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}
